* Counting sort (stable)

Assumptions

- keys are integers and their range is "small"
- any range of integers, including negative numbers, can be mapped via a
  function key(x) -> [1, k] (equivalently [0, k-1])

** Algorithm

Omit the key() function which is assumed to be the identity here.

Use three arrays:

  input     A  1..n
  output    B  1..n
  auxiliary C  1..k

  // initialise counters
  for i  = 1 to k
    do C[i] = 0

  // counting step: C[i] = |{key == i}|
  for j = 1 to n
    do C[A[j]] = C[A[j]] + 1  // increment and note traversing 1 to n

  // prefix sums step: C[i] = |{key <= i}|
  for i = 2 to k
    do C[i] = C[i] + C[i-1]

  // distribution step
  for j = n downto 1
    do B[C[A[j]]] = A[j]
       C[A[j]] = C[A[j]] - 1  // decrement as traversing n downto 1

- the counts give the number of elements of each type to be reserved in the
  output array
- the prefixes give the next output index for an element of that type and are
  decremented as elements are output, preserving input order (stability)

** Example

      n=5                                  k=4
      1 2 3 4 5                            1 2 3 4
  A = 4 1 3 4 3                        C = 0 0 0 0  initialise
                                           1 0 2 2  counting step
                                       C = 1 1 3 5  prefix sums step

  ie., 1 item <= 1, 1 item <= 2, 3 items <= 3, 5 items <= 4

  B = 0 0 3 0 0  j=5 A[j]=3 C[A[j]]=3  C = 1 1 2 5  distribution step
      0 0 3 0 4  j=4 A[j]=4 C[A[j]]=5  C = 1 1 2 4
      0 3 3 0 4  j=3 A[j]=3 C[A[j]]=2  C = 1 1 1 4
      1 3 3 0 4  j=2 A[j]=1 C[A[j]]=1  C = 0 1 1 4
      1 3 3 4 4  j=1 A[j]=4 C[A[j]]=4  C = 0 1 1 3  done

** Running time

  Algorithm is: O(k+n)   // count the loops: O(k)+O(n)+O(k)+O(n)

  - good if k = O(n)     // algorithm is O(n) ie., linear as desired
  - bad  if k > O(n)     // if k O(nlog n) then no better than comparison sort

** Practical limits on space

  - If the numbers we want to sort fit into a byte then k=2**8=256, which is a
    small auxiliary size, and this will be extremely efficient.

  - On the other hand, if we try to process 32 bit unsigned ints, the array
    would be 2**32 or 4.2 billion words or 16GB which is not very practicable.

